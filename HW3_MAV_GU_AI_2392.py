#####################################################################################################
# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. 
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
#####################################################################################################

def devision (a, b):
    if b == 0:
        return "You can not divide by zero"
    return a / b

print(devision(int(input("Enter a number: ")), int(input("Enter the second number: "))))

#####################################################################################################
#2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия,
# год рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. 
# Осуществить вывод данных о пользователе одной строкой.
#####################################################################################################

def user_info (name, surname, year, city, email, phone):
    lst = [name, surname, year, city, email, phone]
    s = ';'.join(lst)
    print(s)
    
name = input("User name: ")
surname = input("User surname: ")
year = input("User year is birth: ")
city = input("User city: ")
email = input("User email: ")
phone = input("User phone number: ")
user_info(name, surname, year, city, email, phone)

#####################################################################################################
# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух аргументов.
#####################################################################################################

def my_func(*args):
    if args[0] >= args[1] and args[1] >= args[2]: #данное условие требуется, если ввод данных будет таким: 10, 6, 5
       return args[0] + args[1]
    elif args[1] >= args[2] and args[2] >= args[0]: #данное условие требуется, если ввод данных будет таким: 5, 10, 6
       return args[1] + args[2]
    elif args[0] < args[1] < args[2]: #данное условие требуется, если ввод данных будет таким: 5, 6, 10
       return args[1] + args[2]
    else:
       return args[0] + args[2] #если в предыдущих уловиях будет False

print(my_func(int(input("Enter a number: ")), int(input("Enter the second number: ")), int(input("Enter the third number: "))))

######################################################################################################
# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x в степень y. 
# Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. 
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
######################################################################################################

# 1 способ

def my_func(x, y):
    z = x ** y
    print(z)
    
x = int(input("Введите целое положительное число: "))
y = int(input("Введите целое отрицательное число: "))
my_func(x, y)


# 2 способ

def my_func(x, y):
    z = 1.0 #прививаем тип float
    for i in range (abs(y)):  #abs-модуль числа, отрицательное число станет положительным
        z /= x # правило x^(-y)=1/x^y
    print(z)

x = int(input("Введите целое положительное число: "))
y = int(input("Введите целое отрицательное число: "))
my_func(x, y)

#######################################################################################################
# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма чисел. 
# Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел будет добавляться к 
# уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается. 
# Если специальный символ введён после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после 
# этого завершить программу.
########################################################################################################

def list_contains_spec_symbol(lst, spec_symbol="Q"): # создание функции на спец. символ "Q"
    return spec_symbol in (token.upper() for token in lst) #преобразование введенный спец.символ всегда в вверхний регистор, 
                                                             # согласно условию


def numbers(lst): # создание функции на создания листа из введенных чисел пользователем
    return [int(token) for token in lst if token.isdigit()] # токенизация, т.е. дробление на отдельные фрагменты, также проверка на то, 
                                                             # что введенные данные содержат числа


should_exit = False # команда выхода, если есть ложные утверждения при прогоне
current_sum = 0 # переменная с 0 суммой для дальнейшего суммирования
while not should_exit: # если не найдены ложные утверждения гоним по циклу 
    input_list = [x for x in input('Input numbers: ').split()] # ввод данных пользователем и дробление на отдельные фрагменты
    current_sum += sum(numbers(input_list)) # суммирование всех чисел из листа к имеющейся сумме, на старте это 0
    print(f'Current sum = {current_sum}') # вывод результата
    should_exit = list_contains_spec_symbol(input_list) # команда для вызова функции для прерывания цикла


##########################################################################################################
# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной первой буквой. 
# Например, print(int_func(‘text’)) -> Text.
##########################################################################################################

def int_func():
    print(Str.capitalize())

Str = input("Введите фразу через пробел прописными буквами: ")
int_func()

#########################################################################################################
# 7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом. 
# Каждое слово состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но каждое слово должно начинаться 
# с заглавной буквы. Используйте написанную ранее функцию int_func().
#########################################################################################################

def int_func():
    print(Str.title())
    
Str = input("Введите фразу через пробел прописными буквами: ")
int_func()










